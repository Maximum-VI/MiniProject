{"ast":null,"code":"const handlePayment = e => {\n  e.preventDefault();\n  if (!cardNumber || !expiryDate || !cvv || !name) {\n    setMessage(\"Please fill in all fields.\");\n    return;\n  }\n  if (!/^\\d{16}$/.test(cardNumber)) {\n    setMessage(\"Invalid card number. Must be 16 digits.\");\n    return;\n  }\n  if (!/^\\d{3,4}$/.test(cvv)) {\n    setMessage(\"Invalid CVV. Must be 3 or 4 digits.\");\n    return;\n  }\n  setMessage(\"Payment successful! Redirecting...\");\n  setTimeout(() => {\n    const storedCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\n    const orderTotal = storedCart.reduce((sum, item) => sum + item.Price, 0);\n    if (storedCart.length === 0) {\n      setMessage(\"Cart is empty! Cannot place order.\");\n      return;\n    }\n\n    // Generate new order\n    const newOrder = {\n      orderId: `ORD${Math.floor(Math.random() * 1000000)}`,\n      cart: storedCart,\n      total: orderTotal,\n      timestamp: new Date().toISOString()\n    };\n\n    // Retrieve previous orders or initialize an empty array\n    const previousOrders = JSON.parse(localStorage.getItem(\"orders\")) || [];\n\n    // Add new order to the orders array\n    const updatedOrders = [...previousOrders, newOrder];\n\n    // Save updated orders array to localStorage\n    localStorage.setItem(\"orders\", JSON.stringify(updatedOrders));\n\n    // Remove cart from localStorage after successful payment\n    localStorage.removeItem(\"cart\");\n\n    // Navigate to the Order page\n    navigate(\"/orders\");\n  }, 2000);\n};","map":{"version":3,"names":["handlePayment","e","preventDefault","cardNumber","expiryDate","cvv","name","setMessage","test","setTimeout","storedCart","JSON","parse","localStorage","getItem","orderTotal","reduce","sum","item","Price","length","newOrder","orderId","Math","floor","random","cart","total","timestamp","Date","toISOString","previousOrders","updatedOrders","setItem","stringify","removeItem","navigate"],"sources":["C:/MiniProject/src/pages/payment.js"],"sourcesContent":["const handlePayment = (e) => {\r\n    e.preventDefault();\r\n  \r\n    if (!cardNumber || !expiryDate || !cvv || !name) {\r\n      setMessage(\"Please fill in all fields.\");\r\n      return;\r\n    }\r\n  \r\n    if (!/^\\d{16}$/.test(cardNumber)) {\r\n      setMessage(\"Invalid card number. Must be 16 digits.\");\r\n      return;\r\n    }\r\n  \r\n    if (!/^\\d{3,4}$/.test(cvv)) {\r\n      setMessage(\"Invalid CVV. Must be 3 or 4 digits.\");\r\n      return;\r\n    }\r\n  \r\n    setMessage(\"Payment successful! Redirecting...\");\r\n    setTimeout(() => {\r\n      const storedCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\r\n      const orderTotal = storedCart.reduce((sum, item) => sum + item.Price, 0);\r\n  \r\n      if (storedCart.length === 0) {\r\n        setMessage(\"Cart is empty! Cannot place order.\");\r\n        return;\r\n      }\r\n  \r\n      // Generate new order\r\n      const newOrder = {\r\n        orderId: `ORD${Math.floor(Math.random() * 1000000)}`,\r\n        cart: storedCart,\r\n        total: orderTotal,\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n  \r\n      // Retrieve previous orders or initialize an empty array\r\n      const previousOrders = JSON.parse(localStorage.getItem(\"orders\")) || [];\r\n  \r\n      // Add new order to the orders array\r\n      const updatedOrders = [...previousOrders, newOrder];\r\n  \r\n      // Save updated orders array to localStorage\r\n      localStorage.setItem(\"orders\", JSON.stringify(updatedOrders));\r\n  \r\n      // Remove cart from localStorage after successful payment\r\n      localStorage.removeItem(\"cart\");\r\n  \r\n      // Navigate to the Order page\r\n      navigate(\"/orders\");\r\n    }, 2000);\r\n  };\r\n  "],"mappings":"AAAA,MAAMA,aAAa,GAAIC,CAAC,IAAK;EACzBA,CAAC,CAACC,cAAc,CAAC,CAAC;EAElB,IAAI,CAACC,UAAU,IAAI,CAACC,UAAU,IAAI,CAACC,GAAG,IAAI,CAACC,IAAI,EAAE;IAC/CC,UAAU,CAAC,4BAA4B,CAAC;IACxC;EACF;EAEA,IAAI,CAAC,UAAU,CAACC,IAAI,CAACL,UAAU,CAAC,EAAE;IAChCI,UAAU,CAAC,yCAAyC,CAAC;IACrD;EACF;EAEA,IAAI,CAAC,WAAW,CAACC,IAAI,CAACH,GAAG,CAAC,EAAE;IAC1BE,UAAU,CAAC,qCAAqC,CAAC;IACjD;EACF;EAEAA,UAAU,CAAC,oCAAoC,CAAC;EAChDE,UAAU,CAAC,MAAM;IACf,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE;IACjE,MAAMC,UAAU,GAAGL,UAAU,CAACM,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACC,KAAK,EAAE,CAAC,CAAC;IAExE,IAAIT,UAAU,CAACU,MAAM,KAAK,CAAC,EAAE;MAC3Bb,UAAU,CAAC,oCAAoC,CAAC;MAChD;IACF;;IAEA;IACA,MAAMc,QAAQ,GAAG;MACfC,OAAO,EAAE,MAAMC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,OAAO,CAAC,EAAE;MACpDC,IAAI,EAAEhB,UAAU;MAChBiB,KAAK,EAAEZ,UAAU;MACjBa,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC;;IAED;IACA,MAAMC,cAAc,GAAGpB,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE;;IAEvE;IACA,MAAMkB,aAAa,GAAG,CAAC,GAAGD,cAAc,EAAEV,QAAQ,CAAC;;IAEnD;IACAR,YAAY,CAACoB,OAAO,CAAC,QAAQ,EAAEtB,IAAI,CAACuB,SAAS,CAACF,aAAa,CAAC,CAAC;;IAE7D;IACAnB,YAAY,CAACsB,UAAU,CAAC,MAAM,CAAC;;IAE/B;IACAC,QAAQ,CAAC,SAAS,CAAC;EACrB,CAAC,EAAE,IAAI,CAAC;AACV,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}